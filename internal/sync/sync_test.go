package sync_test

import (
	"errors"
	"testing"

	"github.com/alnvdl/gomockcmp/external"
	"github.com/alnvdl/gomockcmp/internal/mock"
	"github.com/alnvdl/gomockcmp/internal/sync"
	"github.com/frankban/quicktest"
	"github.com/golang/mock/gomock"
)

func TestWithHandwrittenMock(t *testing.T) {
	c := quicktest.New(t)

	m := mock.NewMockServiceClientHandwritten()
	// PROBLEM: we need to setup the mock, and each mock may have their own
	// ways of setting up calls and expectations, since standardizing practices
	// around handwritten mocks is not trivial without enforcement.
	m.DoSomethingReturns = map[string][]mock.DoSomethingReturn{
		"id1": {
			{ServiceClientObject: external.ServiceClientObject{
				ID: "id2",
				A:  1,
				B:  "2",
			}, Error: nil},
		},
	}
	m.DoSomethingSlightlyDifferentReturns = map[string][]mock.DoSomethingReturn{
		"id2": {
			{ServiceClientObject: external.ServiceClientObject{}, Error: errors.New("some error")},
		},
	}

	s := sync.Syncer{
		ServiceClient: m,
	}
	err := s.SyncWithExternalService("id1")
	c.Assert(err, quicktest.ErrorMatches, "error in DoSomethingSlightlyDifferent")

	// PROBLEM: we have to verify that the mock was invoked as expected.
	//
	// PROBLEM: verifying that the call was correct is made in one place,
	// setting up return values is made in another (above). That can be very
	// hard to reason about, especially in longer tests.
	c.Assert(m.DoSomethingCalls, quicktest.DeepEquals, []mock.DoSomethingCall{{
		ID: "id1",
	}})
	c.Assert(m.DoSomethingSlightlyDifferentCalls, quicktest.DeepEquals, []mock.DoSomethingCall{{
		ID: "id2",
	}})
}

func TestWithAutogeneratedMock(t *testing.T) {
	c := quicktest.New(t)

	ctrl := gomock.NewController(t)
	m := mock.NewMockServiceClient(ctrl)

	// SOLUTION: setting up expected call parameters and return values is
	// easily done in the same place, keeping the connection between
	// request/response.
	//
	// SOLUTION: call ordering can be enforced; or not :)
	gomock.InOrder(
		m.EXPECT().DoSomething(gomock.Eq("id1")).Return(external.ServiceClientObject{
			ID: "id2",
			A:  1,
			B:  "2",
		}, nil),
		// PROBLEM: interface{} is used everywhere with gomock. We have to
		// constantly lookup types to properly write these lines, or we get
		// errors when running the test.
		m.EXPECT().DoSomethingSlightlyDifferent(gomock.Eq("id2")).DoAndReturn(func(id string) (external.ServiceClientObject, error) {
			// SOLUTION: custom logic (e.g., adapt input, or make the function
			// take more than 1 second) can be added for each of the calls
			// separately and without affecting other similar calls.
			return external.ServiceClientObject{}, errors.New("some error")
		}),
	)

	s := sync.Syncer{
		ServiceClient: m,
	}
	err := s.SyncWithExternalService("id1")
	c.Assert(err, quicktest.ErrorMatches, "error in DoSomethingSlightlyDifferent")
	// SOLUTION: all mock-related verifications are transparently performed,
	// no need to code them.
}
